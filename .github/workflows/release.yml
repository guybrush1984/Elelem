name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

permissions:
  contents: write  # Required for creating releases

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync

    - name: Run config validation tests
      run: |
        echo "🔧 Running configuration validation tests..."
        uv run pytest tests/test_config_validation.py -v

    - name: Run parameterized models tests
      run: |
        echo "📋 Running parameterized model system tests..."
        uv run pytest tests/test_parameterized_models.py -v

    - name: Run faker tests
      run: |
        echo "🎭 Running faker tests (no real API calls)..."
        uv run pytest tests/test_elelem_with_faker.py -v

    - name: Run server mode tests
      run: |
        echo "🌐 Running server mode tests (HTTP API)..."
        uv run python tests/test_elelem_server_mode.py

    - name: Run Docker Compose integration tests
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_FREE_API_KEY }}
      run: |
        echo "🐳 Running Docker Compose integration tests..."
        uv run pytest -v -m integration

  build-python:
    name: Build Python Package
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools-scm

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/*

  build-docker:
    name: Build and Push Docker Images
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build Elelem Server Image
    - name: Extract metadata for server
      id: meta-server
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/elelem-server
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build and push server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/elelem/server/Dockerfile
        push: true
        tags: ${{ steps.meta-server.outputs.tags }}
        labels: ${{ steps.meta-server.outputs.labels }}
        platforms: linux/amd64

    # Build Elelem Dashboard Image
    - name: Extract metadata for dashboard
      id: meta-dashboard
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/elelem-dashboard
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build and push dashboard image
      uses: docker/build-push-action@v5
      with:
        context: src/elelem/dashboard
        file: src/elelem/dashboard/Dockerfile
        push: true
        tags: ${{ steps.meta-dashboard.outputs.tags }}
        labels: ${{ steps.meta-dashboard.outputs.labels }}
        platforms: linux/amd64

    # Test Server Image
    - name: Test server image
      run: |
        echo "🧪 Testing server image functionality..."

        # Pull and run the server image locally
        docker run -d -p 8000:8000 --name test-server ${{ secrets.DOCKERHUB_USERNAME }}/elelem-server:${{ github.ref_name }}

        # Wait for server startup
        echo "⏳ Waiting for server to start..."
        sleep 15

        # Check if container is running
        if ! docker ps | grep test-server; then
          echo "❌ Server container failed to start"
          docker logs test-server
          exit 1
        fi

        # Test health endpoint
        echo "🔍 Testing /health endpoint..."
        if ! curl -f --max-time 10 http://localhost:8000/health; then
          echo "❌ Health check failed"
          docker logs test-server
          exit 1
        fi

        # Test models endpoint
        echo "🔍 Testing /v1/models endpoint..."
        if ! curl -f --max-time 10 http://localhost:8000/v1/models; then
          echo "❌ Models endpoint failed"
          docker logs test-server
          exit 1
        fi

        echo "✅ Server image tests passed!"

        # Cleanup
        docker stop test-server
        docker rm test-server

    # Test Dashboard Image (basic startup test)
    - name: Test dashboard image
      run: |
        echo "🧪 Testing dashboard image startup..."

        # Note: Dashboard requires DATABASE_URL, so we just test if it starts without crashing
        timeout 30 docker run --name test-dashboard ${{ secrets.DOCKERHUB_USERNAME }}/elelem-dashboard:${{ github.ref_name }} || true

        # Check if it started (even if it failed due to missing DATABASE_URL)
        if docker logs test-dashboard 2>&1 | grep -q "streamlit"; then
          echo "✅ Dashboard image started successfully"
        else
          echo "❌ Dashboard image failed to start"
          docker logs test-dashboard
          exit 1
        fi

        # Cleanup
        docker rm test-dashboard

    - name: Print image details
      run: |
        echo "🐳 Docker images built, tested, and pushed successfully!"
        echo "📦 Server Image: ${{ secrets.DOCKERHUB_USERNAME }}/elelem-server:${{ github.ref_name }}"
        echo "📦 Dashboard Image: ${{ secrets.DOCKERHUB_USERNAME }}/elelem-dashboard:${{ github.ref_name }}"
        echo "🏷️  Server tags: ${{ steps.meta-server.outputs.tags }}"
        echo "🏷️  Dashboard tags: ${{ steps.meta-dashboard.outputs.tags }}"
        echo "🌐 Both images are publicly available on Docker Hub"

  release:
    name: Create GitHub Release
    needs: [test, build-python, build-docker]  # Wait for all builds to complete
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          body: |
            ## 🚀 Release ${{ github.ref_name }}

            ### What's included:
            - 📦 **Python package**: Available in release assets
            - 🐳 **API Server image**: `guybrush1984/elelem-server:${{ github.ref_name }}`
            - 📊 **Dashboard image**: `guybrush1984/elelem-dashboard:${{ github.ref_name }}`
            - 🏷️ **Latest tags**: Both images also tagged as `:latest`

            ### Usage:

            #### 🚀 API Server (OpenAI-compatible)
            ```bash
            # Run API server with PostgreSQL
            docker run -p 8000:8000 \
              -e ELELEM_DATABASE_URL="postgresql://user:pass@host:5432/db" \
              guybrush1984/elelem-server:${{ github.ref_name }}

            # Test with OpenAI SDK
            curl http://localhost:8000/v1/models
            ```

            #### 📊 Dashboard (Metrics visualization)
            ```bash
            # Run dashboard (requires same PostgreSQL)
            docker run -p 8501:8501 \
              -e DATABASE_URL="postgresql://user:pass@host:5432/db" \
              guybrush1984/elelem-dashboard:${{ github.ref_name }}

            # Access at http://localhost:8501
            ```

            #### 🐍 Python Library
            ```bash
            # Install from GitHub
            pip install git+https://github.com/guybrush1984/Elelem@${{ github.ref_name }}

            # Use in code
            from elelem import Elelem
            elelem = Elelem()  # Auto-detects PostgreSQL via ELELEM_DATABASE_URL
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Upload to PyPI (uncomment if you have a private PyPI)
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     repository_url: https://your-private-pypi.com/